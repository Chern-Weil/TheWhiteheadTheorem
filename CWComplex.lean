/-
The definition of CW complexes follows David W√§rn's suggestion at
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231769080
-/

import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Topology.Category.TopCat.Basic
import Mathlib.Topology.Category.TopCat.Limits.Products
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.Topology.Order
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.UnitInterval
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.Analysis.InnerProductSpace.PiL2 -- EuclideanSpace
import Mathlib.Init.Set
--import Mathlib.Data.Finset.Basic

open CategoryTheory


namespace CWComplex
noncomputable section

def Sphere : ‚Ñ§ ‚Üí TopCat
  | (n : ‚Ñï) => TopCat.of <| Metric.sphere (0 : EuclideanSpace ‚Ñù <| Fin <| n + 1) 1
  | _       => TopCat.of Empty

def ClosedBall : ‚Ñ§ ‚Üí TopCat
  | (n : ‚Ñï) => TopCat.of <| Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin n) 1
  | _       => TopCat.of Empty

notation:0 "ùïä "n => Sphere n
notation:0 "ùîª "n => ClosedBall n

def SphereInclusion (n : ‚Ñ§) : (ùïä n) ‚Üí (ùîª n + 1) :=
  match n with
  | Int.ofNat _   => fun ‚ü®pt, hpt‚ü© => ‚ü®pt, le_of_eq hpt‚ü©
  | Int.negSucc _ => Empty.rec

theorem continuous_sphereInclusion (n : ‚Ñ§) : Continuous (SphereInclusion n) :=
  match n with
  | Int.ofNat _ => ‚ü®by
      intro _ ‚ü®t, ht, ht'‚ü©
      rw [isOpen_induced_iff]
      use t, ht
      rw [ht'.symm]
      tauto‚ü©
  | Int.negSucc n => ‚ü®by tauto‚ü©

def BundledSphereInclusion (n : ‚Ñ§) : TopCat.of (ùïä n) ‚ü∂ TopCat.of (ùîª n + 1) :=
  ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü©

def SigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    (Œ£ (_ : cells), ùïä n) ‚Üí (Œ£ (_ : cells), ùîª n + 1) :=
  Sigma.map id fun _ x => SphereInclusion n x

theorem continuous_sigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    Continuous (SigmaSphereInclusion n cells) := by
  apply Continuous.sigma_map
  intro _
  apply continuous_sphereInclusion

def BundledSigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ TopCat.of (Œ£ (_ : cells), ùîª n + 1) :=
  ‚ü®SigmaSphereInclusion n cells, continuous_sigmaSphereInclusion n cells‚ü©

def SigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    (Œ£ (_ : cells), ùïä n) ‚Üí X :=
  fun ‚ü®i, x‚ü© => attach_maps i x

theorem continuous_sigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    Continuous (SigmaAttachMap X n cells attach_maps) := by
  apply continuous_sigma
  exact fun i => (attach_maps i).continuous_toFun

def BundledSigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ X :=
  ‚ü®SigmaAttachMap X n cells attach_maps, continuous_sigmaAttachMap X n cells attach_maps‚ü©

-- A type witnessing that X' is obtained from X by attaching n-cells
structure AttachCells (X X' : TopCat) (n : ‚Ñ§) where
  /- The index type over n-cells -/
  cells : Type
  attach_maps : cells ‚Üí C(ùïä n, X)
  iso_pushout : X' ‚âÖ Limits.pushout
    (BundledSigmaSphereInclusion n cells)
    (BundledSigmaAttachMap X n cells attach_maps)

end
end CWComplex



structure RelativeCWComplex (A : TopCat) where
  /- Skeleta -/
  -- might need this: https://math.stackexchange.com/questions/650279/pushout-from-initial-object-isomorphic-to-coproduct
  sk : ‚Ñ§ ‚Üí TopCat
  /- A is isomorphic to the (-1)-skeleton. -/
  iso_sk_neg_one : A ‚âÖ sk (-1)
  /- The (n + 1)-skeleton is obtained from the n-skeleton by attaching (n + 1)-cells. -/
  attach_cells : (n : ‚Ñ§) ‚Üí CWComplex.AttachCells (sk n) (sk (n + 1)) (n + 1)

abbrev CWComplex := RelativeCWComplex (TopCat.of Empty)



namespace CWComplex
noncomputable section

-- The inclusion map from X to X', given that X' is obtained from X by attaching n-cells
def AttachCellsInclusion (X X' : TopCat) (n : ‚Ñ§) (att : AttachCells X X' n) : X ‚ü∂ X'
  := @Limits.pushout.inr TopCat _ _ _ X
      (BundledSigmaSphereInclusion n att.cells)
      (BundledSigmaAttachMap X n att.cells att.attach_maps) _ ‚â´ att.iso_pushout.inv

-- The inclusion map from the n-skeleton to the (n+1)-skeleton of a CW-complex
def SkeletaInclusion {A : TopCat} (X : RelativeCWComplex A) (n : ‚Ñ§) : X.sk n ‚ü∂ X.sk (n + 1) :=
  AttachCellsInclusion (X.sk n) (X.sk (n + 1)) (n + 1) (X.attach_cells n)

-- The inclusion map from the n-skeleton to the m-skeleton of a CW-complex
def SkeletaInclusion' {A : TopCat} (X : RelativeCWComplex A)
    (n : ‚Ñ§) (m : ‚Ñ§) (n_le_m : n ‚â§ m) : X.sk n ‚ü∂ X.sk m :=
  if h : n = m then by
    rw [<- h]
    exact ùüô (X.sk n)
  else by
    have h' : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, h‚ü©
    exact SkeletaInclusion X n ‚â´ SkeletaInclusion' X (n + 1) m h'
  termination_by Int.toNat (m - n)
  decreasing_by
    simp_wf
    rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h')]
    linarith

def ColimitDiagram {A : TopCat} (X : RelativeCWComplex A) : ‚Ñ§ ‚•§ TopCat where
  obj := X.sk
  map := @fun n m n_le_m => SkeletaInclusion' X n m <| Quiver.Hom.le n_le_m
  map_id := by simp [SkeletaInclusion']
  map_comp := by
    let rec p (n m l : ‚Ñ§) (n_le_m : n ‚â§ m) (m_le_l : m ‚â§ l) (n_le_l : n ‚â§ l) :
        SkeletaInclusion' X n l n_le_l =
        SkeletaInclusion' X n m n_le_m ‚â´
        SkeletaInclusion' X m l m_le_l :=
      if hnm : n = m then by
        unfold SkeletaInclusion'
        aesop
      else by
        have h1 : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, hnm‚ü©
        have h2 : n < l := by linarith
        unfold SkeletaInclusion'
        simp [hnm, Int.ne_of_lt h2]
        rcases em (m = l) with hml | hml
        . aesop
        congr
        rw [p (n + 1) m l h1 m_le_l h2]
        congr
        simp [hml]
        conv => lhs; unfold SkeletaInclusion'
        simp [hml]
      termination_by Int.toNat (l - n)
      decreasing_by
        simp_wf
        rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h2)]
        linarith
    intro n m l n_le_m m_le_l
    have n_le_m := Quiver.Hom.le n_le_m
    have m_le_l := Quiver.Hom.le m_le_l
    exact p n m l n_le_m m_le_l (Int.le_trans n_le_m m_le_l)

-- The topology on a CW-complex.
def toTopCat {A : TopCat} (X : RelativeCWComplex A) : TopCat :=
  Limits.colimit (ColimitDiagram X)

instance : Coe CWComplex TopCat where coe X := toTopCat X


open unitInterval

def j0 {X : TopCat} : X ‚ü∂ TopCat.of (X √ó I) := ‚ü®fun x => (x, 0), Continuous.Prod.mk_left 0‚ü©
def prod_map {W X Y Z : TopCat} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : TopCat.of (W √ó Y) ‚ü∂ TopCat.of (X √ó Z) :=
  ‚ü®Prod.map f g, Continuous.prod_map f.continuous_toFun g.continuous_toFun‚ü©
def HomotopyExtensionProperty' {A X : TopCat} (i : A ‚ü∂ X) : Prop :=
  ‚àÄ Y : TopCat, ‚àÄ f : X ‚ü∂ Y, ‚àÄ H : TopCat.of (A √ó I) ‚ü∂ Y, i ‚â´ f = j0 ‚â´ H ‚Üí
  ‚àÉ H' : TopCat.of (X √ó I) ‚ü∂ Y, f = j0 ‚â´ H' ‚àß H = prod_map i (ùüô (TopCat.of I)) ‚â´ H'

-- def j0 {X : Type} [TopologicalSpace X] : C(X, X √ó I) := ‚ü®fun x => (x, 0), Continuous.Prod.mk_left 0‚ü©

def HomotopyExtensionProperty {A X : Type} [TopologicalSpace A] [TopologicalSpace X] (i : C(A, X)) : Prop :=
  ‚àÄ Y : Type, [TopologicalSpace Y] ‚Üí ‚àÄ f : C(X, Y), ‚àÄ H : C(A √ó I, Y), f ‚àò i = H ‚àò (., 0) ‚Üí
  ‚àÉ H' : C(X √ó I, Y), f = H' ‚àò (., 0) ‚àß H = H' ‚àò Prod.map i id

theorem hep_sphereInclusion (n : ‚Ñ§) : HomotopyExtensionProperty (BundledSphereInclusion n) :=
--theorem hep_sphereInclusion (n : ‚Ñ§) : HomotopyExtensionProperty ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü© :=
  match n with
  | (n : ‚Ñï) => sorry
  | Int.negSucc n' => -- n = -(n' + 1)
    if h_neg_one : n' = 0 then by
      rw [h_neg_one]
      intro Y _ f H hcomp
      use ‚ü®fun (x, _) => f x, Continuous.fst' f.continuous_toFun‚ü© -- f ‚àò Prod.fst
      simp
      constructor
      . ext x
        simp
      ext ‚ü®x, _‚ü©
      tauto -- Empty.rec x
    else by
      have h_neg_one : n' > 0 := Nat.pos_of_ne_zero h_neg_one
      have h_neg_one‚ÇÅ : Int.negSucc n' < 0 := Int.negSucc_lt_zero n'
      have h_neg_one‚ÇÇ : Int.negSucc n' < 0 := Int.negSucc_lt_zero n'
      have h_neg_one' : Int.negSucc n' + 1 < 0 := by
        sorry
      intro Y _ f H hcomp
      -- have H' : Empty ‚Üí Y := Empty.rec
      -- have H' : (ùîª (Int.negSucc n)) ‚Üí Y := Empty.rec
      let H' : (ùîª Int.negSucc n') √ó I ‚Üí Y := fun (x, _) => Empty.rec x
      let H' : (ùîª Int.negSucc n' + 1) √ó I ‚Üí Y := by
        intro (x, _)
        unfold ClosedBall at x
        sorry
      sorry

theorem hep_sphereInclusion' (n : ‚Ñ§) : HomotopyExtensionProperty ‚ü®SphereInclusion n, continuous_sphereInclusion n‚ü© :=
  if h1 : n = -1 then by
    rw [h1]
    intro Y _ f H hcomp
    use ‚ü®fun (x, _) => f x, Continuous.fst' f.continuous_toFun‚ü© -- f ‚àò Prod.fst
    simp
    constructor
    . ext x
      simp
    ext ‚ü®x, _‚ü©
    tauto
  else if h2 : n + 1 < 0 then by
    have ‚ü®m, hm‚ü© := Int.eq_negSucc_of_lt_zero h2
    intro Y _ f H hcomp
    --rw [hm] at f
    let œÜ (n : ‚Ñï) : C(ùîª Int.negSucc n, Y) := ‚ü®Empty.rec, by tauto‚ü©
    let œÜ' (n : ‚Ñï) : C((ùîª Int.negSucc n) √ó I, Y) :=
      ‚ü®fun (x, _) => œÜ n x, Continuous.fst' (œÜ n).continuous_toFun‚ü©
    let H' : C((ùîª n + 1) √ó I, Y) := by rw [hm]; exact œÜ' m
    use H'
    constructor
    . ext x
      dsimp
      sorry
    ext ‚ü®x, z‚ü©
    simp
    sorry
  else by
    have h3 : n ‚â• 0 := by contrapose! h2; contrapose! h1; linarith
    sorry

end
end CWComplex

section
  variable {X Y : Type} [TopologicalSpace X] [TopologicalSpace Y]

  #check ContinuousMap.liftCover -- gluing lemma

  #check continuous_of_discreteTopology
  #check ContinuousMap
  #check Continuous -- isOpen_preimage : ‚àÄ s, IsOpen s ‚Üí IsOpen (f ‚Åª¬π' s)

  example (f : X ‚Üí Y) (isClosed_preimage : ‚àÄ s, IsClosed s ‚Üí IsClosed (f ‚Åª¬π' s)) : Continuous f := by
    exact continuous_iff_isClosed.mpr isClosed_preimage
end

section
  variable {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

  variable {Œπ : Type*} [Finite Œπ] (S : Œπ ‚Üí Set Œ±) (œÜ : ‚àÄ i : Œπ, C(S i, Œ≤))
  (hœÜ : ‚àÄ (i j) (x : Œ±) (hxi : x ‚àà S i) (hxj : x ‚àà S j), œÜ i ‚ü®x, hxi‚ü© = œÜ j ‚ü®x, hxj‚ü©)
  (hS_cover : ‚àÄ x : Œ±, ‚àÉ i, x ‚àà S i) (hS_closed : ‚àÄ i, IsClosed (S i))

  noncomputable def liftCover_closed : C(Œ±, Œ≤) :=
    have H : ‚ãÉ i, S i = Set.univ := Set.iUnion_eq_univ_iff.2 hS_cover
    let Œ¶ := Set.liftCover S (fun i ‚Ü¶ œÜ i) hœÜ H
    ContinuousMap.mk Œ¶ <| continuous_iff_isClosed.mpr fun Y hY ‚Ü¶ by
      have : ‚àÄ i, œÜ i ‚Åª¬π' Y = S i ‚à© Œ¶ ‚Åª¬π' Y := fun i ‚Ü¶ by
        ext x
        simp
        constructor
        . intro ‚ü®hxi, hœÜx‚ü©
          have : Œ¶ x = œÜ i ‚ü®x, hxi‚ü© := Set.liftCover_of_mem hxi
          rw [‚Üê this] at hœÜx
          trivial
        . intro ‚ü®hxi, hœÜx‚ü©
          use hxi
          have : Œ¶ x = œÜ i ‚ü®x, hxi‚ü© := Set.liftCover_of_mem hxi
          rwa [‚Üê this]
      have : Œ¶ ‚Åª¬π' Y = ‚ãÉ i, Subtype.val '' (œÜ i ‚Åª¬π' Y) := by
        conv => rhs; ext x; arg 1; ext i; rw [this]
        conv => rhs; ext x; rw [‚Üê Set.iUnion_inter, H]; simp
      rw [this]
      exact isClosed_iUnion_of_finite fun i ‚Ü¶
        IsClosed.trans (IsClosed.preimage (œÜ i).continuous hY) (hS_closed i)

  -- #check Finset
  -- #check Finite
  -- #check Set.iUnionLift
  -- #check Set.liftCover
  -- #check ContinuousMap.liftCover
  -- #check Set.mem_image_val_of_mem
  -- #check Set.liftCover_of_mem
  -- #check Set.iUnion
  -- #check Set.iUnion_inter
  -- #check isClosed_iUnion_of_finite
end

section
  #check liftCover_closed

  open CWComplex
  open unitInterval

  theorem hep_0' : HomotopyExtensionProperty' (BundledSphereInclusion 0) := by
    unfold HomotopyExtensionProperty'
    --unfold BundledSphereInclusion SphereInclusion
    simp
    intro Y f H hf
    -- ‚àÉ H' : TopCat.of (X √ó I) ‚ü∂ Y, f = j0 ‚â´ H' ‚àß H = prod_map i (ùüô (TopCat.of I)) ‚â´ H'
    let X0 := {‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© : (ùîª 1) √ó I | ‚Äñx‚Äñ ‚â§ 1 - y / 2}
    let X1 := {‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© : (ùîª 1) √ó I | ‚Äñx‚Äñ ‚â• 1 - y / 2}

    -- have : (x y z : ‚Ñù) ‚Üí (hx : x > 0) ‚Üí (h : x * y ‚â§ z) ‚Üí (y ‚â§ z / x) :=
    --   fun x y z hx h ‚Ü¶ by
    --     exact (le_div_iff' hx).mpr h
    -- have : (x : ‚Ñù) ‚Üí (h1 : 0 < x) ‚Üí 0 < 2 / x := fun x h1 ‚Ü¶ div_pos (by linarith) h1
    -- have : 3 < 5 := by decide
    -- have : (n : ‚Ñï) ‚Üí (x : EuclideanSpace ‚Ñù (Fin n)) ‚Üí (r : ‚Ñù)
    --   ‚Üí ‚Äñr ‚Ä¢ x‚Äñ = ‚Äñr‚Äñ * ‚Äñx‚Äñ := fun n x r ‚Ü¶ norm_smul _ _

    -- have : Continuous fun (‚ü®x, y‚ü© : (ùîª 1) √ó I) ‚Ü¶ x := continuous_fst.comp continuous_id
    -- have : Continuous fun (‚ü®x, y‚ü© : (ùîª 1) √ó I) ‚Ü¶ Prod.mk y x := continuous_swap
    -- have : Continuous fun (‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© : (ùîª 1) √ó I) ‚Ü¶ Prod.mk y x :=
    --    continuous_swap.comp (Continuous.prod_map continuous_subtype_val continuous_subtype_val)
    -- have : Continuous fun (‚ü®x, y‚ü© : ‚Ñù √ó (EuclideanSpace ‚Ñù <| Fin 1)) ‚Ü¶ x ‚Ä¢ y := continuous_smul
    -- have : Continuous fun (‚ü®x, y‚ü© : (ùîª 1) √ó I) ‚Ü¶ y.val ‚Ä¢ x.val := continuous_smul.comp <|
    --   continuous_swap.comp <| Continuous.prod_map continuous_subtype_val continuous_subtype_val
    -- have : Continuous fun (x : {x : ‚Ñù | x ‚â† 0}) ‚Ü¶ (1 : ‚Ñù) / x :=
    --   continuous_const.div continuous_subtype_val fun x ‚Ü¶ unitsEquivNeZero.proof_2 ‚Ñù x

    let H'0 : C(X0, (ùîª 1)) := {
      toFun := fun pt ‚Ü¶ {
        -- Note: pattern matching is done inside `toFun` to make `Continuous.subtype_mk` work
        val := match pt with
          | ‚ü®‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü©, _‚ü© => (2 / (2 - y)) ‚Ä¢ x,
        property := by
          obtain ‚ü®‚ü®‚ü®x, _‚ü©, ‚ü®y, _, _‚ü©‚ü©, hxy‚ü© := pt
          simp [norm_smul]
          have : 0 < |2 - y| := lt_of_le_of_ne (abs_nonneg _) (abs_ne_zero.mpr (by linarith)).symm
          rw [‚Üê le_div_iff' (div_pos (by norm_num) this)]; simp
          nth_rw 2 [‚Üê (@abs_eq_self ‚Ñù _ 2).mpr (by norm_num)]
          rw [‚Üê abs_div, le_abs, sub_div]; simp
          exact Or.inl hxy
      }
      continuous_toFun := by
        have : Continuous fun (y : ‚Ñù) ‚Ü¶ 2 - y := by continuity
        exact ((continuous_smul.comp <| continuous_swap.comp <| continuous_subtype_val.prod_map <|
          continuous_const.div (this.comp continuous_subtype_val) fun ‚ü®y, ‚ü®_, _‚ü©‚ü© ‚Ü¶ by
            simp; linarith).comp continuous_subtype_val).subtype_mk _
    }

    let H'1_x : C(X1, (ùïä 0)) := {
      toFun := fun pt ‚Ü¶ {
        val := match pt with
          | ‚ü®‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü©, hxy‚ü© => (1 / ‚Äñx‚Äñ) ‚Ä¢ x
        property := by
          obtain ‚ü®‚ü®‚ü®x, _‚ü©, ‚ü®y, _, _‚ü©‚ü©, hxy‚ü© := pt
          simp [norm_smul]
          change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
          exact inv_mul_cancel (by linarith)
      }
      continuous_toFun := by
        refine Continuous.subtype_mk ?_ _
        exact continuous_smul.comp <| (Continuous.div continuous_const (continuous_norm.comp <|
          continuous_subtype_val.comp <| continuous_fst.comp <| continuous_subtype_val) fun pt ‚Ü¶ by
            obtain ‚ü®‚ü®‚ü®x, _‚ü©, ‚ü®y, _, _‚ü©‚ü©, hxy‚ü© := pt
            simp; change x ‚â† 0; rw [‚Üê norm_ne_zero_iff]
            change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
            linarith).prod_mk <|
          continuous_subtype_val.comp <| continuous_fst.comp <| continuous_subtype_val
    }

    let H'1 : C(X1, (ùïä 0) √ó I) := {
      toFun := fun pt ‚Ü¶ match pt with
        | ‚ü®‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü©, _‚ü© => ‚ü®
            ‚ü®(1 / ‚Äñx‚Äñ) ‚Ä¢ x, by sorry‚ü©,
            ‚ü®(y - 2) / ‚Äñx‚Äñ + 2, sorry‚ü©
          ‚ü©,
      continuous_toFun := by
        sorry
    }

    -- have : Continuous fun (x : ‚Ñù) ‚Ü¶ ‚Äñx‚Äñ := continuous_norm
    --have : Continuous fun (‚ü®x, _‚ü© : ùîª 1) ‚Ü¶ ‚Äñx‚Äñ := continuous_subtype_val.norm
    -- have : Continuous (id : ‚Ñù ‚Üí ‚Ñù) := continuous_id
    -- let Z1 := {‚ü®x, y‚ü© : ‚Ñù √ó ‚Ñù | x ‚â§ 1 - y / 2}
    -- let Z1' := {‚ü®x, ‚ü®y, hy‚ü©‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2}
    -- let Z1'' := {‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü© : I √ó I | x ‚â§ 1 - y / 2}
    -- have : IsClosed Z1 := isClosed_le continuous_fst (by continuity)
    -- have : IsClosed Z1' := isClosed_le continuous_fst (by continuity)
    -- have : IsClosed Z1'' := isClosed_le (continuous_subtype_val.comp' continuous_fst) (by continuity)
    -- let Z2 := Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin 2) 1
    -- have : IsClosed Z2 := Metric.isClosed_ball

    have : Continuous fun (y : ‚Ñù) ‚Ü¶ 1 - y / 2 := by continuity
    have hX0 : IsClosed X0 := continuous_iff_isClosed.mp
      (continuous_subtype_val.norm.prod_map continuous_id) {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <|
      isClosed_le continuous_fst <| this.comp <| continuous_subtype_val.comp continuous_snd
    have hX1 : IsClosed X1 := continuous_iff_isClosed.mp
      (continuous_subtype_val.norm.prod_map continuous_id) {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â• 1 - y / 2} <|
      isClosed_le (this.comp <| continuous_subtype_val.comp continuous_snd) continuous_fst

    sorry

  theorem hep_0 : HomotopyExtensionProperty (BundledSphereInclusion 0) := by
    unfold HomotopyExtensionProperty
    --unfold BundledSphereInclusion SphereInclusion
    simp
    intro Y instY f H hf
    sorry

  #check unitsEquivNeZero
  #check ContinuousDiv
  #check Continuous.div
  #check Continuous.div'
  #check continuous_div'
  #check continuous_inv
  #check Continuous.comp
  #check Continuous.comp'
  #check (fun (‚ü®x, hx‚ü© : ùîª 1) ‚Ü¶ ‚Äñx‚Äñ)
  #check continuous_swap
  #check ContinuousSMul
  #check ContinuousConstSMul
  #check Prod.continuousSMul
  #check Prod.continuousConstSMul
  #check Ring.uniformContinuousConstSMul

  #check norm_smul
  #check norm_div
  #check abs_eq_self
  #check abs_div
  #check le_abs
  #check add_div
  #check sub_div
  #check Real.norm_eq_abs
  #check abs_ne_zero.mpr
  #check one_div_pos

  #check isClosed_compl_iff
  #check isOpen_prod_iff
  #check isOpen_prod_iff'
  #check Metric.isClosed_ball
  #check isClosed_Iic
  #check isClosed_le
  #check OrderClosedTopology
  set_option trace.Meta.synthInstance true in
  #check OrderClosedTopology I
  set_option trace.Meta.synthInstance true in
  #check OrderClosedTopology ‚Ñù
  set_option trace.Meta.synthInstance true in
  #check Continuous fun (x : ‚Ñù) ‚Ü¶ x * x
  #check Continuous.mul
end


-- variable {X : CWComplex}
-- #check (X : TopCat)
