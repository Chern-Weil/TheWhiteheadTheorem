/-
The definition of CW complexes follows David W√§rn's suggestion at
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231769080
-/

import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Topology.Category.TopCat.Basic
import Mathlib.Topology.Category.TopCat.Limits.Products
import Mathlib.Topology.Category.TopCat.Limits.Pullbacks
import Mathlib.Topology.Order
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.UnitInterval
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Pullbacks
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.Analysis.InnerProductSpace.PiL2 -- EuclideanSpace
import Mathlib.Init.Set

open CategoryTheory

namespace CWComplex

noncomputable def sphere (n : ‚Ñ§) : TopCat :=
  TopCat.of <| Metric.sphere (0 : EuclideanSpace ‚Ñù <| Fin <| Int.toNat <| n + 1) 1

noncomputable def closedBall (n : ‚Ñ§) : TopCat :=
  TopCat.of <| Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin <| Int.toNat n) 1

notation "ùïä "n => sphere n
notation "ùîª "n => closedBall n

def sphereInclusion (n : ‚Ñ§) : (ùïä n) ‚Üí (ùîª n + 1) := fun ‚ü®p, hp‚ü© => ‚ü®p, le_of_eq hp‚ü©

lemma continuous_sphereInclusion (n : ‚Ñ§) : Continuous (sphereInclusion n) :=
  ‚ü®fun _ ‚ü®s, _, hs‚ü© ‚Ü¶ by rw [isOpen_induced_iff, ‚Üê hs]; tauto‚ü©

def bundledSphereInclusion (n : ‚Ñ§) : TopCat.of (ùïä n) ‚ü∂ TopCat.of (ùîª n + 1) :=
  ‚ü®sphereInclusion n, continuous_sphereInclusion n‚ü©

def sigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    (Œ£ (_ : cells), ùïä n) ‚Üí (Œ£ (_ : cells), ùîª n + 1) :=
  Sigma.map id fun _ x => sphereInclusion n x

lemma continuous_sigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    Continuous (sigmaSphereInclusion n cells) :=
  Continuous.sigma_map fun _ ‚Ü¶ continuous_sphereInclusion n

def bundledSigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ TopCat.of (Œ£ (_ : cells), ùîª n + 1) :=
  ‚ü®sigmaSphereInclusion n cells, continuous_sigmaSphereInclusion n cells‚ü©

def sigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    (Œ£ (_ : cells), ùïä n) ‚Üí X :=
  fun ‚ü®i, x‚ü© => attach_maps i x

lemma continuous_sigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    Continuous (sigmaAttachMap X n cells attach_maps) :=
  continuous_sigma fun i => (attach_maps i).continuous_toFun

def bundledSigmaAttachMap (X : TopCat) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(ùïä n, X)) :
    TopCat.of (Œ£ (_ : cells), ùïä n) ‚ü∂ X :=
  ‚ü®sigmaAttachMap X n cells attach_maps, continuous_sigmaAttachMap X n cells attach_maps‚ü©

-- A type witnessing that X' is obtained from X by attaching n-cells
structure AttachCells (X X' : TopCat) (n : ‚Ñ§) where
  /- The index type over n-cells -/
  cells : Type
  attach_maps : cells ‚Üí C(ùïä n, X)
  iso_pushout : X' ‚âÖ Limits.pushout
    (bundledSigmaSphereInclusion n cells)
    (bundledSigmaAttachMap X n cells attach_maps)

end CWComplex

structure RelativeCWComplex (A : TopCat) where
  /- Skeleta -/
  -- might need this: https://math.stackexchange.com/questions/650279/pushout-from-initial-object-isomorphic-to-coproduct
  sk : ‚Ñ§ ‚Üí TopCat
  /- A is isomorphic to the (-1)-skeleton. -/
  iso_sk_neg_one : A ‚âÖ sk (-1)
  /- The (n + 1)-skeleton is obtained from the n-skeleton by attaching (n + 1)-cells. -/
  attach_cells : (n : ‚Ñ§) ‚Üí CWComplex.AttachCells (sk n) (sk (n + 1)) (n + 1)

abbrev CWComplex := RelativeCWComplex (TopCat.of Empty)

namespace CWComplex

noncomputable section Topology

-- The inclusion map from X to X', given that X' is obtained from X by attaching n-cells
def AttachCellsInclusion (X X' : TopCat) (n : ‚Ñ§) (att : AttachCells X X' n) : X ‚ü∂ X'
  := @Limits.pushout.inr TopCat _ _ _ X
      (bundledSigmaSphereInclusion n att.cells)
      (bundledSigmaAttachMap X n att.cells att.attach_maps) _ ‚â´ att.iso_pushout.inv

-- The inclusion map from the n-skeleton to the (n+1)-skeleton of a CW-complex
def skeletaInclusion {A : TopCat} (X : RelativeCWComplex A) (n : ‚Ñ§) : X.sk n ‚ü∂ X.sk (n + 1) :=
  AttachCellsInclusion (X.sk n) (X.sk (n + 1)) (n + 1) (X.attach_cells n)

-- The inclusion map from the n-skeleton to the m-skeleton of a CW-complex
def skeletaInclusion' {A : TopCat} (X : RelativeCWComplex A)
    (n : ‚Ñ§) (m : ‚Ñ§) (n_le_m : n ‚â§ m) : X.sk n ‚ü∂ X.sk m :=
  if h : n = m then by
    rw [‚Üê h]
    exact ùüô (X.sk n)
  else by
    have h' : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, h‚ü©
    exact skeletaInclusion X n ‚â´ skeletaInclusion' X (n + 1) m h'
  termination_by Int.toNat (m - n)
  decreasing_by
    simp_wf
    rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h')]
    linarith

def ColimitDiagram {A : TopCat} (X : RelativeCWComplex A) : ‚Ñ§ ‚•§ TopCat where
  obj := X.sk
  map := @fun n m n_le_m => skeletaInclusion' X n m <| Quiver.Hom.le n_le_m
  map_id := by simp [skeletaInclusion']
  map_comp := by
    let rec p (n m l : ‚Ñ§) (n_le_m : n ‚â§ m) (m_le_l : m ‚â§ l) (n_le_l : n ‚â§ l) :
        skeletaInclusion' X n l n_le_l =
        skeletaInclusion' X n m n_le_m ‚â´
        skeletaInclusion' X m l m_le_l :=
      if hnm : n = m then by
        unfold skeletaInclusion'
        subst hnm
        simp only [eq_mpr_eq_cast, ‚ÜìreduceDite, cast_eq, Category.id_comp]
      else by
        have h1 : n < m := Int.lt_iff_le_and_ne.mpr ‚ü®n_le_m, hnm‚ü©
        have h2 : n < l := by linarith
        unfold skeletaInclusion'
        simp [hnm, Int.ne_of_lt h2]
        rcases em (m = l) with hml | hml
        . subst hml
          simp only [‚ÜìreduceDite]
          rw [cast_eq, Category.comp_id]
        congr
        rw [p (n + 1) m l h1 m_le_l h2]
        congr
        simp only [hml, ‚ÜìreduceDite]
        conv => lhs; unfold skeletaInclusion'
        simp only [hml, ‚ÜìreduceDite]
      termination_by Int.toNat (l - n)
      decreasing_by
        simp_wf
        rw [Int.toNat_of_nonneg (Int.sub_nonneg_of_le h2)]
        linarith
    intro n m l n_le_m m_le_l
    have n_le_m := Quiver.Hom.le n_le_m
    have m_le_l := Quiver.Hom.le m_le_l
    exact p n m l n_le_m m_le_l (Int.le_trans n_le_m m_le_l)

-- The topology on a CW-complex.
def toTopCat {A : TopCat} (X : RelativeCWComplex A) : TopCat :=
  Limits.colimit (ColimitDiagram X)

-- TODO: Coe RelativeCWComplex ?
instance : Coe CWComplex TopCat where coe X := toTopCat X

end Topology -- noncomputable section

section GluingLemma

#check ContinuousMap.liftCover -- gluing lemma for an open cover

variable {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

variable {Œπ : Type*} [Finite Œπ] (S : Œπ ‚Üí Set Œ±) (œÜ : ‚àÄ i : Œπ, C(S i, Œ≤))
(hœÜ : ‚àÄ (i j) (x : Œ±) (hxi : x ‚àà S i) (hxj : x ‚àà S j), œÜ i ‚ü®x, hxi‚ü© = œÜ j ‚ü®x, hxj‚ü©)
(hS_cover : ‚àÄ x : Œ±, ‚àÉ i, x ‚àà S i) (hS_closed : ‚àÄ i, IsClosed (S i))

noncomputable def liftCoverClosed : C(Œ±, Œ≤) :=
  have H : ‚ãÉ i, S i = Set.univ := Set.iUnion_eq_univ_iff.2 hS_cover
  let Œ¶ := Set.liftCover S (fun i ‚Ü¶ œÜ i) hœÜ H
  ContinuousMap.mk Œ¶ <| continuous_iff_isClosed.mpr fun Y hY ‚Ü¶ by
    have : ‚àÄ i, œÜ i ‚Åª¬π' Y = S i ‚à© Œ¶ ‚Åª¬π' Y := fun i ‚Ü¶ by
      ext x
      simp
      constructor
      . intro ‚ü®hxi, hœÜx‚ü©
        have : Œ¶ x = œÜ i ‚ü®x, hxi‚ü© := Set.liftCover_of_mem hxi
        rw [‚Üê this] at hœÜx
        trivial
      . intro ‚ü®hxi, hœÜx‚ü©
        use hxi
        have : Œ¶ x = œÜ i ‚ü®x, hxi‚ü© := Set.liftCover_of_mem hxi
        rwa [‚Üê this]
    have : Œ¶ ‚Åª¬π' Y = ‚ãÉ i, Subtype.val '' (œÜ i ‚Åª¬π' Y) := by
      conv => rhs; ext x; arg 1; ext i; rw [this]
      conv => rhs; ext x; rw [‚Üê Set.iUnion_inter, H]; simp
    rw [this]
    exact isClosed_iUnion_of_finite fun i ‚Ü¶
      IsClosed.trans (IsClosed.preimage (œÜ i).continuous hY) (hS_closed i)

theorem liftCoverClosed_coe {i : Œπ} (x : S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i x := by
  rw [liftCoverClosed, ContinuousMap.coe_mk, Set.liftCover_coe _]

theorem liftCoverClosed_coe' {i : Œπ} (x : Œ±) (hx : x ‚àà S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i ‚ü®x, hx‚ü© := by
  rw [‚Üê liftCoverClosed_coe]

end GluingLemma

section HEP

open unitInterval

def prodMap {W X Y Z : TopCat} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) : TopCat.of (W √ó Y) ‚ü∂ TopCat.of (X √ó Z) :=
  --‚ü®Prod.map f g, Continuous.prod_map f.continuous_toFun g.continuous_toFun‚ü©
  f.prodMap g

def prodMkLeft {X Y : TopCat} (y : Y) : X ‚ü∂ TopCat.of (X √ó Y) :=
  (ContinuousMap.id _).prodMk (ContinuousMap.const _ y)

def inc‚ÇÄ {X : TopCat} : X ‚ü∂ TopCat.of (X √ó I) :=
  --‚ü®fun x => (x, 0), Continuous.Prod.mk_left 0‚ü©
  --@prodMkLeft X (TopCat.of I) ‚ü®0, by norm_num, by norm_num‚ü©
  (ContinuousMap.id _).prodMk (ContinuousMap.const _ 0)

def continuousMapFromEmpty {X Y : Type} [TopologicalSpace X] [TopologicalSpace Y] (empty : X ‚Üí Empty) :
  C(X, Y) := {
    toFun := fun x ‚Ü¶ Empty.rec <| empty x
    continuous_toFun := ‚ü®fun _ _ ‚Ü¶ isOpen_iff_nhds.mpr fun x ‚Ü¶ Empty.rec <| empty x‚ü©
  }

-- def Jar (n : ‚Ñ§) := (ùîª n + 1) √ó I

def jarMid (n : ‚Ñ§) : Set ((ùîª n + 1) √ó I) :=
  {‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© : (ùîª n + 1) √ó I | ‚Äñx‚Äñ ‚â§ 1 - y / 2}

def jarRim (n : ‚Ñ§) : Set ((ùîª n + 1) √ó I) :=
  {‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© : (ùîª n + 1) √ó I | ‚Äñx‚Äñ ‚â• 1 - y / 2}

lemma continuous_sub_div_two : Continuous fun (y : ‚Ñù) ‚Ü¶ 1 - y / 2 :=
  (continuous_sub_left _).comp <| continuous_mul_right _

lemma isClosed_jarMid (n : ‚Ñ§) : IsClosed (jarMid n) :=
  continuous_iff_isClosed.mp (continuous_subtype_val.norm.prod_map continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <| isClosed_le continuous_fst <|
    continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd

lemma isClosed_jarRim (n : ‚Ñ§) : IsClosed (jarRim n) :=
  continuous_iff_isClosed.mp (continuous_subtype_val.norm.prod_map continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â• 1 - y / 2} <| isClosed_le
    (continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd) continuous_fst

end HEP
