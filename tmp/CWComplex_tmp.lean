/-
Copyright (c) 2024 Elliot Dean Young and Jiazhen Xia. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiazhen Xia, Elliot Dean Young
-/

import Mathlib.Topology.Category.TopCat.Limits.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.CategoryTheory.Functor.OfSequence

/-!
# CW-complexes

This file defines (relative) CW-complexes.

## Main definitions

* `RelativeCWComplex`: A relative CW-complex is the colimit of an expanding sequence of subspaces
`sk i` (called the `(i-1)`-skeleton) for `i ‚â• 0`, where `sk 0` (i.e., the `(-1)`-skeleton) is an
arbitrary topological space, and each `sk (n+1)` (i.e., the `n`-skeleton) is obtained from `sk n`
(i.e., the `(n-1)`-skeleton) by attaching `n`-disks.

* `CWComplex`: A CW-complex is a relative CW-complex whose `sk 0` (i.e., `(-1)`-skeleton) is empty.

## References

The definition of CW-complexes follows David W√§rn's suggestion at
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231769080
-/

open CategoryTheory

universe u

namespace RelativeCWComplex

/-- The `n`-sphere is the set of points in ‚Ñù‚Åø‚Å∫¬π whose norm equals `1`,
endowed with the subspace topology. -/
noncomputable def sphere (n : ‚Ñ§) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.sphere (0 : EuclideanSpace ‚Ñù <| Fin <| Int.toNat <| n + 1) 1

/-- The `n`-disk is the set of points in ‚Ñù‚Åø whose norm is at most `1`,
endowed with the subspace topology. -/
noncomputable def disk (n : ‚Ñ§) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin <| Int.toNat n) 1

/-- `ùïä n` denotes the `n`-sphere. -/
scoped notation "ùïä "n => sphere n

/-- `ùîª n` denotes the `n`-disk. -/
scoped notation "ùîª "n => disk n

/-- The inclusion map from the `n`-sphere to the `(n+1)`-disk -/
def sphereInclusion (n : ‚Ñ§) : (ùïä n) ‚ü∂ (ùîª n + 1) where
  toFun := fun ‚ü®p, hp‚ü© ‚Ü¶ ‚ü®p, le_of_eq hp‚ü©
  continuous_toFun := ‚ü®fun t ‚ü®s, ‚ü®r, hro, hrs‚ü©, hst‚ü© ‚Ü¶ by
    rw [isOpen_induced_iff, ‚Üê hst, ‚Üê hrs]
    tauto‚ü©

variable {S D : ‚Ñ§ ‚Üí TopCat.{u}} (f : ‚àÄ n, S n ‚ü∂ D (n + 1))

/-- The inclusion map from the disjoint union of `S n` (boundary of generalized `(n+1)`-cells) to
the disjoint union of `D (n + 1)` (generalized `(n+1)`-cells) where both of the disjoint unions are
indexed by `cells` -/
def generalizedSigmaSphereInclusion (n : ‚Ñ§) (cells : Type) :
    TopCat.of (Œ£ (_ : cells), S n) ‚ü∂ TopCat.of (Œ£ (_ : cells), D (n + 1)) where
  toFun := Sigma.map id fun _ x ‚Ü¶ (f n).toFun x
  continuous_toFun := Continuous.sigma_map fun _ ‚Ü¶ (f n).continuous_toFun

/-- Given an attaching map for each `S n` (boundary of a generalized `(n+1)`-cell), we construct
the attaching map for the disjoint union of all the `S n`. -/
def generalizedSigmaAttachMap (X : TopCat.{u}) (n : ‚Ñ§) (cells : Type)
    (attach_maps : cells ‚Üí C(S n, X)) : TopCat.of (Œ£ (_ : cells), S n) ‚ü∂ X where
  toFun := fun ‚ü®i, x‚ü© ‚Ü¶ attach_maps i x
  continuous_toFun := continuous_sigma fun i ‚Ü¶ (attach_maps i).continuous_toFun

/-- A type witnessing that `X'` is obtained from `X` by attaching generalized `(n+1)`-cells, where
a generalized `(n+1)`-cell is given by `f n : S n ‚ü∂ D (n + 1)`. -/
structure AttachGeneralizedCells (X X' : TopCat.{u}) (n : ‚Ñ§) where
  /-- The index type over the generalized `(n+1)`-cells -/
  cells : Type
  /-- For each generalized `(n+1)`-cell, we have an attaching map from its boundary to `X`. -/
  attach_maps : cells ‚Üí C(S n, X)
  /-- `X'` is the pushout obtained from `X` along `sigmaAttachMap`. -/
  iso_pushout : X' ‚âÖ Limits.pushout (generalizedSigmaSphereInclusion f n cells)
    (generalizedSigmaAttachMap X n cells attach_maps)

/-- The inclusion map from the disjoint union of `n`-spheres to the disjoint union of `(n+1)`-disks,
where both of the disjoint unions are indexed by `cells` -/
noncomputable abbrev sigmaSphereInclusion := generalizedSigmaSphereInclusion sphereInclusion

/-- Given an attaching map for each `n`-sphere, we construct the attaching map for the disjoint
union of the `n`-spheres. -/
abbrev sigmaAttachMap := @generalizedSigmaAttachMap sphere

/-- A type witnessing that `X'` is obtained from `X` by attaching `(n+1)`-disks -/
abbrev AttachCells := AttachGeneralizedCells sphereInclusion

end RelativeCWComplex

/-- A relative CW-complex contains an expanding sequence of subspaces `sk i` (called the
`(i-1)`-skeleton) for `i ‚â• 0`, where `sk 0` (i.e., the `(-1)`-skeleton) is an arbitrary topological
space, and each `sk (n+1)` (i.e., the `n`-skeleton) is obtained from `sk n` (i.e., the
`(n-1)`-skeleton) by attaching `n`-disks. -/
structure RelativeCWComplex where
  /-- The skeletons. Note: `sk i` is usually called the `(i-1)`-skeleton in the math literature. -/
  sk : ‚Ñï ‚Üí TopCat.{u}
  /-- Each `sk (n+1)` (i.e., the `n`-skeleton) is obtained from `sk n` (i.e., the
  `(n-1)`-skeleton) by attaching `n`-disks. -/
  attach_cells : (n : ‚Ñï) ‚Üí RelativeCWComplex.AttachCells (sk n) (sk (n + 1)) (n - 1)

/-- A CW-complex is a relative CW-complex whose `sk 0` (i.e., `(-1)`-skeleton) is empty. -/
structure CWComplex extends RelativeCWComplex.{u} where
  /-- `sk 0` (i.e., the `(-1)`-skeleton) is empty. -/
  sk_zero_empty : sk 0 = TopCat.of (ULift Empty)

namespace RelativeCWComplex

noncomputable section Topology

/-- The inclusion map from `X` to `X'`, given that `X'` is obtained from `X` by attaching
`(n+1)`-disks -/
def AttachCells.inclusion (X X' : TopCat.{u}) (n : ‚Ñ§) (att : AttachCells X X' n) : X ‚ü∂ X' :=
  @Limits.pushout.inr TopCat _ _ _ X (sigmaSphereInclusion n att.cells)
    (sigmaAttachMap X n att.cells att.attach_maps) _ ‚â´ att.iso_pushout.inv

/-- The inclusion map from `sk n` (i.e., the `(n-1)`-skeleton) to `sk (n+1)` (i.e., the
`n`-skeleton) of a relative CW-complex -/
def inclusion (X : RelativeCWComplex.{u}) (n : ‚Ñï) : X.sk n ‚ü∂ X.sk (n + 1) :=
  RelativeCWComplex.AttachCells.inclusion (X.sk n) (X.sk (n + 1)) (n - 1) (X.attach_cells n)

/-- The topology on a relative CW-complex -/
def toTopCat (X : RelativeCWComplex.{u}) : TopCat.{u} :=
  Limits.colimit <| Functor.ofSequence <| inclusion X

instance : Coe RelativeCWComplex TopCat where coe X := toTopCat X

end Topology

end RelativeCWComplex


section GluingLemma

--#check ContinuousMap.liftCover -- gluing lemma for an open cover

variable {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

variable {Œπ : Type*} [Finite Œπ] (S : Œπ ‚Üí Set Œ±) (œÜ : ‚àÄ i : Œπ, C(S i, Œ≤))
(hœÜ : ‚àÄ (i j) (x : Œ±) (hxi : x ‚àà S i) (hxj : x ‚àà S j), œÜ i ‚ü®x, hxi‚ü© = œÜ j ‚ü®x, hxj‚ü©)
(hS_cover : ‚àÄ x : Œ±, ‚àÉ i, x ‚àà S i) (hS_closed : ‚àÄ i, IsClosed (S i))

noncomputable def liftCoverClosed : C(Œ±, Œ≤) :=
  have H : ‚ãÉ i, S i = Set.univ := Set.iUnion_eq_univ_iff.2 hS_cover
  let Œ¶ := Set.liftCover S (fun i ‚Ü¶ œÜ i) hœÜ H
  ContinuousMap.mk Œ¶ <| continuous_iff_isClosed.mpr fun Y hY ‚Ü¶ by
    have : ‚àÄ i, œÜ i ‚Åª¬π' Y = S i ‚à© Œ¶ ‚Åª¬π' Y := fun i ‚Ü¶ by
      ext x
      simp only [Set.mem_image, Set.mem_preimage, Subtype.exists, exists_and_right, exists_eq_right,
        Set.mem_inter_iff]
      conv_lhs => rhs; ext hxi; lhs; equals Œ¶ x => exact Eq.symm (Set.liftCover_of_mem hxi)
      tauto
    have : Œ¶ ‚Åª¬π' Y = ‚ãÉ i, Subtype.val '' (œÜ i ‚Åª¬π' Y) := by
      conv_rhs => ext x; arg 1; ext i; rw [this]
      conv_rhs => ext x; rw [‚Üê Set.iUnion_inter, H, Set.univ_inter]
    rw [this]
    exact isClosed_iUnion_of_finite fun i ‚Ü¶
      IsClosed.trans (IsClosed.preimage (œÜ i).continuous hY) (hS_closed i)

theorem liftCoverClosed_coe {i : Œπ} (x : S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i x := by
  rw [liftCoverClosed, ContinuousMap.coe_mk, Set.liftCover_coe _]

theorem liftCoverClosed_coe' {i : Œπ} (x : Œ±) (hx : x ‚àà S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i ‚ü®x, hx‚ü© := by
  rw [‚Üê liftCoverClosed_coe]

end GluingLemma


namespace RelativeCWComplex

section HEP

open unitInterval

abbrev Jar (n : ‚Ñ§) := (ùîª n + 1) √ó I
def jarMid (n : ‚Ñ§) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â§ 1 - y / 2}
def jarRim (n : ‚Ñ§) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â• 1 - y / 2}

def jarClosedCover (n : ‚Ñ§) : Fin 2 ‚Üí Set (Jar n) := ![jarMid n, jarRim n]

lemma continuous_sub_div_two : Continuous fun (y : ‚Ñù) ‚Ü¶ 1 - y / 2 :=
  (continuous_sub_left _).comp <| continuous_mul_right _

lemma isClosed_jarMid (n : ‚Ñ§) : IsClosed (jarMid n) :=
  continuous_iff_isClosed.mp (continuous_uLift_down.subtype_val.norm.prod_map continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <| isClosed_le continuous_fst <|
    continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd

-- lemma isClosed_jarMid' (n : ‚Ñ§) : IsClosed (jarMid.{u} n) := by
--   have f : Jar.{u} n ‚Üí ‚Ñù √ó I := fun p ‚Ü¶ (‚Äñp.1.down.val‚Äñ, id p.2)
--   have continuous_f : Continuous f := by sorry
--   exact continuous_iff_isClosed.mp (continuous_f)
--     {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <| isClosed_le continuous_fst <|
--     continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd

lemma isClosed_jarRim (n : ‚Ñ§) : IsClosed (jarRim n) :=
  continuous_iff_isClosed.mp (continuous_uLift_down.subtype_val.norm.prod_map continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â• 1 - y / 2} <| isClosed_le
    (continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd) continuous_fst

noncomputable def jarMidProjToFun (n : ‚Ñ§) : jarMid.{u} n ‚Üí disk.{u} (n + 1) := fun p ‚Ü¶ ‚ü®{
  -- Note: pattern matching is done inside `toFun` to make `Continuous.subtype_mk` work
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü©, _‚ü© => (2 / (2 - y)) ‚Ä¢ x,
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© := p
    dsimp only [Int.ofNat_eq_coe, Set.coe_setOf, Set.mem_setOf_eq]
    rw [Metric.mem_closedBall]
    rw [dist_zero_right, norm_smul, norm_div, RCLike.norm_ofNat, Real.norm_eq_abs]
    have : 0 < |2 - y| := lt_of_le_of_ne (abs_nonneg _) (abs_ne_zero.mpr (by linarith)).symm
    rw [‚Üê le_div_iff' (div_pos (by norm_num) this), one_div, inv_div]
    nth_rw 2 [‚Üê (@abs_eq_self ‚Ñù _ 2).mpr (by norm_num)]
    rw [‚Üê abs_div, sub_div, div_self (by norm_num), le_abs]
    exact Or.inl hxy }‚ü©

lemma continuous_jarMidProjToFun (n : ‚Ñ§) : Continuous (jarMidProjToFun.{u} n) :=
  continuous_uLift_up.comp <|
    ((continuous_smul.comp <| continuous_swap.comp <| continuous_uLift_down.subtype_val.prod_map <|
      continuous_const.div ((continuous_sub_left _).comp continuous_subtype_val)
      fun ‚ü®y, _, _‚ü© ‚Ü¶ by rw [Function.comp_apply]; linarith).comp
    continuous_subtype_val).subtype_mk _

noncomputable def jarMidProj (n : ‚Ñ§) : C(jarMid n, ùîª n + 1) :=
  ‚ü®jarMidProjToFun n, continuous_jarMidProjToFun n‚ü©

lemma jarRim_fst_ne_zero (n : ‚Ñ§) : ‚àÄ p : jarRim n, ‚Äñp.val.fst.down.val‚Äñ ‚â† 0 :=
  fun ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© ‚Ü¶ by
    conv => lhs; arg 1; dsimp
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    linarith

noncomputable def jarRimProjFstToFun (n : ‚Ñ§) : jarRim.{u} n ‚Üí sphere.{u} n := fun p ‚Ü¶ ‚ü®{
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, _ ‚ü©, _‚ü© => (1 / ‚Äñx‚Äñ) ‚Ä¢ x
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, yl, yr‚ü© ‚ü©, hxy‚ü© := p
    simp only [one_div, mem_sphere_iff_norm, sub_zero, norm_smul, norm_inv, norm_norm]
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    exact inv_mul_cancel‚ÇÄ (by linarith) }‚ü©

lemma continuous_jarRimProjFstToFun (n : ‚Ñ§) : Continuous (jarRimProjFstToFun.{u} n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  exact continuous_smul.comp <| (Continuous.div continuous_const
    (continuous_uLift_down.subtype_val.fst.subtype_val.norm) <| jarRim_fst_ne_zero.{u} n).prod_mk <|
      continuous_uLift_down.subtype_val.fst.subtype_val

end HEP

end RelativeCWComplex
